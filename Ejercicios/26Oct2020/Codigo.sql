CREATE TABLE TBL_NAVEGANTES(
	ID_NAVEGANTES INT PRIMARY KEY NOT NULL,
	NOMBRE NVARCHAR(20) NOT NULL,
	RATING INT DEFAULT 0,
	EDAD INT DEFAULT 18,
	CIUDAD NVARCHAR(50)
);

SELECT* FROM TBL_NAVEGANTES;

CREATE TABLE CAT_BOTES(
	ID_BOTES INTEGER PRIMARY KEY NOT NULL,
	NOMBRE_BOTES NVARCHAR(25) NOT NULL,
	COLOR NVARCHAR(20) NOT NULL
);

SELECT* FROM CAT_BOTES;

CREATE TABLE TBL_RESERVA(
	ID_RESERVA INTEGER PRIMARY KEY NOT NULL,
	ID_BOTES INT NOT NULL,
	FECHA_RESERVA DATE NOT NULL,
	CONSTRAINT FK_BOTES FOREIGN KEY (ID_BOTES) REFERENCES CAT_BOTES(ID_BOTES),
	CONSTRAINT FK_NAVEG FOREIGN KEY (ID_RESERVA) REFERENCES TBL_NAVEGANTES(ID_NAVEGANTES)
);

SELECT* FROM TBL_RESERVA;

-- Inner join
SELECT ID_RESERVA,TR.ID_BOTES,FECHA_RESERVA,ID_NAVEGANTES,NOMBRE,RATING,EDAD,CIUDAD,NOMBRE_BOTES,COLOR
 FROM TBL_RESERVA TR 
INNER JOIN TBL_NAVEGANTES TN ON TN.ID_NAVEGANTES = TR.ID_RESERVA 
INNER JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES;

--left join
SELECT * FROM TBL_RESERVA TR 
LEFT JOIN TBL_NAVEGANTES TN ON TN.ID_NAVEGANTES = TR.ID_RESERVA 
LEFT JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES;

--right join

SELECT * FROM TBL_RESERVA TR 
RIGHT JOIN TBL_NAVEGANTES TN ON TN.ID_NAVEGANTES = TR.ID_RESERVA 
RIGHT JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES;

-- outer join

SELECT * FROM TBL_RESERVA TR 
RIGHT OUTER JOIN TBL_NAVEGANTES TN ON TN.ID_NAVEGANTES = TR.ID_RESERVA 
RIGHT OUTER JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES;

SELECT * FROM TBL_RESERVA TR 
LEFT OUTER JOIN TBL_NAVEGANTES TN ON TN.ID_NAVEGANTES = TR.ID_RESERVA 
LEFT OUTER JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES;

-- SELF JOIN

SELECT * FROM TBL_NAVEGANTES TN, TBL_NAVEGANTES TNB WHERE TN.RATING > TNB.RATING;

-- CROSS JOIN

SELECT * FROM TBL_RESERVA TR 
CROSS JOIN TBL_NAVEGANTES TN
CROSS JOIN CAT_BOTES CB;

-- Left join (navegantes-reserva)

SELECT * FROM TBL_NAVEGANTES TN LEFT JOIN TBL_RESERVA TR ON TN.ID_NAVEGANTES = TR.ID_RESERVA;

-- Right join (reserva-botes)

SELECT * FROM TBL_RESERVA TR RIGHT JOIN CAT_BOTES CB ON TR.ID_BOTES = CB.ID_BOTES;

-- FULL OUTER JOIN

SELECT * FROM TBL_RESERVA TR 
FULL OUTER JOIN TBL_NAVEGANTES TN ON TN.ID_NAVEGANTES = TR.ID_RESERVA 
FULL OUTER JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES;


-- Tabla de llenado, Solo se insertarán datos de obtenidos... Esta tabla no cumple ninguna regla de normalización
CREATE TABLE TODO_XD(
	ID_RESERVA INTEGER,
	ID_BOTES INTEGER,
	FECHA_RESERVA DATE,
	ID_NAVEGANTES INTEGER,
	NOMBRE INTEGER,
	RATING INTEGER,
	EDAD INTEGER,
	CIUDAD NVARCHAR(20),
	NOMBRE_BOTES NVARCHAR(25),
	COLOR NVARCHAR(20)
);

-- SELECT PUERCO PARA LLENAR TABLA
/*
SELECT ID_RESERVA,TR.ID_BOTES,FECHA_RESERVA,ID_NAVEGANTES,NOMBRE,RATING,EDAD,CIUDAD,NOMBRE_BOTES,COLOR
 FROM TBL_RESERVA TR 
INNER JOIN TBL_NAVEGANTES TN ON TN.ID_NAVEGANTES = TR.ID_RESERVA 
INNER JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES;*/

/*
-- Query dinámico
BEGIN
	DECLARE @TBL_PASO TABLE (RowCnt NVARCHAR(15) NULL);
	DECLARE C_V1 CURSOR FOR SELECT 'inner join','left join','right join', 'outer join','self join', 'cross join';
	DECLARE @V AS NVARCHAR(15);
	OPEN C_V1 
		FETCH NEXT FROM C_V1 INTO @V
			WHILE(@@FETCH_STATUS = 0)
				BEGIN
					INSERT @TBL_PASO(
						RowCnt
					)
					EXECUTE('SELECT ' + @v); --Executes the query
					FETCH NEXT FROM C_V1 INTO @V
				END
	CLOSE C_V1
	DEALLOCATE C_V1
END*/

-- Navegante más jóven
SELECT TOP 1 * FROM TBL_NAVEGANTES TN ORDER BY TN.EDAD ASC;
-- Bote más solicitado
SELECT TOP 1 TR.ID_BOTES, CB.NOMBRE_BOTES, CB.COLOR, COUNT(TR.ID_BOTES) CUENTA FROM TBL_RESERVA TR INNER JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES GROUP BY TR.ID_BOTES,CB.NOMBRE_BOTES, CB.COLOR;
-- Navegantes que no tienen reserva
SELECT * FROM TBL_NAVEGANTES TN WHERE TN.ID_NAVEGANTES NOT IN(SELECT TR.ID_RESERVA FROM TBL_RESERVA TR);
-- Pregunta 4
SELECT TR.ID_BOTES, CB.NOMBRE_BOTES, CB.COLOR, COUNT(TR.ID_BOTES) CUENTA FROM TBL_RESERVA TR INNER JOIN CAT_BOTES CB ON CB.ID_BOTES = TR.ID_BOTES GROUP BY TR.ID_BOTES,CB.NOMBRE_BOTES, CB.COLOR;
-- Pregunta 5
SELECT * FROM TBL_NAVEGANTES TN ORDER BY TN.RATING, TN.ID_NAVEGANTES;