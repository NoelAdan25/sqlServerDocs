CREATE DATABASE PRACTICAS;
USE PRACTICAS;

CREATE TABLE CAT_SEXO(
	CAT_SEX_ID INTEGER PRIMARY KEY NOT NULL,
	CAT_SEX_DESC NVARCHAR(10) NOT NULL
);

CREATE TABLE HIST_SEMESTRES(
	HIST_SEM_ID INTEGER PRIMARY KEY NOT NULL,
	HIST_SEM_DESC NVARCHAR(50) NOT NULL,
	HIST_SEM_APERTURA DATE,
	HIST_SEM_CIERRE DATE,
	HIST_SEM_STATUS INTEGER FOREIGN KEY REFERENCES CAT_EVENTOS(CAT_EVE_ID) DEFAULT 1
);

CREATE TABLE CAT_SEMANAS_ESCOLARES(
	CAT_SEE_ID INTEGER PRIMARY KEY DEFAULT 1,
	CAT_SEE_INICIO DATE,
	CAT_SEE_FIN DATE	
);

CREATE TABLE CAT_TUTORES(
	CAT_TUT_MATRICULA INTEGER PRIMARY KEY NOT NULL,
	CAT_TUT_NOMBRES NVARCHAR(50) NOT NULL,
	CAT_TUT_PATERNO NVARCHAR(30) NOT NULL,
	CAT_TUT_MATERNO NVARCHAR(30) NOT NULL,
	CAT_TUT_SEXO INTEGER FOREIGN KEY REFERENCES CAT_SEXO(CAT_SEX_ID)
);

CREATE TABLE HIST_GENERACION_DETALLE(
	HIST_GED_ID INTEGER PRIMARY KEY NOT NULL,
	HIST_GED_GENERACION CHAR NOT NULL,
	HIST_GED_REGISTRO DATE DEFAULT GETDATE()
);
ALTER TABLE HIST_GENERACION_DETALLE ADD HIST_GED_SEMESTRE INTEGER FOREIGN KEY REFERENCES HIST_SEMESTRES(HIST_SEM_ID);

CREATE TABLE CAT_ALUMNOS(
	CAT_ALU_MATRICULA INTEGER PRIMARY KEY NOT NULL,
	CAT_ALU_GENERACION INTEGER FOREIGN KEY REFERENCES HIST_GENERACION_DETALLE(HIST_GED_ID),
	CAT_ALU_NOMBRES NVARCHAR(50) NOT NULL,
	CAT_ALU_PATERNO NVARCHAR(30) NOT NULL,
	CAT_ALU_MATERNO NVARCHAR(30) NOT NULL,
	CAT_ALU_TUTOR INTEGER FOREIGN KEY REFERENCES CAT_TUTORES(CAT_TUT_MATRICULA),
	CAT_ALU_SEXO INTEGER FOREIGN KEY REFERENCES CAT_SEXO(CAT_SEX_ID),
	CAT_ALU_FECHA DATETIME DEFAULT GETDATE(),
	CAT_ALU_STATUS INTEGER DEFAULT 0
);
CREATE TABLE CAT_EVENTOS(
	CAT_EVE_ID INTEGER PRIMARY KEY NOT NULL,
	CAT_EVE_DESC NVARCHAR(25) NOT NULL
	-- 0 -> Cierre Semestre
	-- 1 -> Inicio Semestre
	-- 2 -> Mantenimiento
	-- 3 -> Observación
	-- 4 -> Simulación
	-- 5 -> Familiarización
	-- 6 -> Especialización	
);
ALTER TABLE CAT_EVENTOS ADD CAT_EVE_MAXTYPE INTEGER DEFAULT 0;

-- Mejor un índice
CREATE TABLE HIST_DETALLE(
	HIST_OBD_MATRICULA INTEGER FOREIGN KEY REFERENCES CAT_ALUMNOS(CAT_ALU_MATRICULA),
	HIST_OBD_EVENTO INTEGER FOREIGN KEY REFERENCES CAT_EVENTOS(CAT_EVE_ID),
	HIST_OBD_ENTRADA DATETIME DEFAULT SYSDATETIME(),
	HIST_OBD_SALIDA DATETIME
);
--DROP INDEX I_DETALLE ON HIST_DETALLE;
--CREATE INDEX I_DETALLE ON HIST_DETALLE (HIST_OBD_MATRICULA DESC, HIST_OBD_EVENTO DESC);

CREATE TABLE HIST_AUDITORIA(
	HIST_AUD_ID INTEGER PRIMARY KEY,
	HIST_AUD_ENVENTO INTEGER FOREIGN KEY REFERENCES CAT_EVENTOS(CAT_EVE_ID),	
	HIST_AUD_NOTA NVARCHAR(500),
	HIST_AUD_FECHA DATETIME DEFAULT GETDATE()
);
CREATE TABLE CAT_TURNOS(
	CAT_TUR_ID INTEGER PRIMARY KEY NOT NULL,
	CAT_TUR_DESC NVARCHAR(25) NOT NULL
);

CREATE TABLE HIST_TUTORES(
	HIST_TUT_ID INTEGER,
	HIST_TUT_MATRICULA INTEGER,
	HIST_TUT_SEMESTRE INTEGER,
	HIST_TUT_EVENTO INTEGER,
	HIST_TUT_HORAS INTEGER
);
begin
	declare @ARBOL int = 6;
	select '*'
	union all
	select REPLICATE('*', f.number) from dbo.fn_Fibonacci(@ARBOL) f where f.number > 1;
end
CREATE FUNCTION fn_Fibonacci(@max int)
RETURNS @numbers TABLE(number int)
AS
BEGIN
	Declare @n1 int = 0,@n2 int =1,@i int=0,@temp int
	Insert Into @numbers Values(@n1),(@n2)
	WHILE (@i<=@max-2)
	BEGIN 
		Insert Into @numbers Values(@n2+@n1)
		set @temp = @n2
		Set @n2 = @n2 + @n1
		Set @n1 = @temp
		Set @i += 1
	END	
	RETURN 
END

CREATE SEQUENCE dbo.ALUMNOSECUENCIA
	AS INT
		START WITH 1
		INCREMENT BY 1
		MINVALUE 1 MAXVALUE 10000
		CYCLE;
CREATE OR ALTER PROCEDURE SP_MATRICULA @TURNO INT, @MATRICULA NVARCHAR(15) OUTPUT
AS
BEGIN
	SELECT @MATRICULA = CONCAT((SELECT HGD.HIST_GED_GENERACION FROM HIST_GENERACION_DETALLE HGD INNER JOIN
HIST_SEMESTRES HS ON HS.HIST_SEM_ID = HGD.HIST_GED_SEMESTRE AND HS.HIST_SEM_STATUS = 1),
SUBSTRING(CAST(YEAR(GETDATE()) AS NVARCHAR),3,LEN(CAST(YEAR(GETDATE()) AS NVARCHAR))),'20',CAST(@TURNO AS NVARCHAR),REPLACE(STR(CAST(NEXT VALUE FOR dbo.ALUMNOSECUENCIA AS NVARCHAR), 4),' ','0'));	
END

BEGIN
DECLARE @MATRICULA NVARCHAR(15);
EXEC SP_MATRICULA 1, @MATRICULA OUTPUT;
PRINT @MATRICULA;
END

BEGIN
	WITH DETALLE AS(
		SELECT HIST_OBD_MATRICULA MATRICULA, HIST_OBD_EVENTO EVENTO,
SUM((DATEDIFF(HOUR,HIST_OBD_ENTRADA,HIST_OBD_SALIDA))) HORAS 
FROM HIST_DETALLE
GROUP BY HIST_OBD_MATRICULA,HIST_OBD_EVENTO
	)
	SELECT D.MATRICULA, 
	D.EVENTO, 
	IIF((SELECT CE.CAT_EVE_MAXTYPE FROM CAT_EVENTOS CE WHERE CE.CAT_EVE_ID = D.EVENTO) < SUM(D.HORAS), (SELECT CE.CAT_EVE_MAXTYPE FROM CAT_EVENTOS CE WHERE CE.CAT_EVE_ID = D.EVENTO), SUM(D.HORAS))
	"TOTAL HORAS" FROM DETALLE D
	GROUP BY D.MATRICULA, D.EVENTO, D.HORAS;
END

CREATE OR ALTER PROCEDURE SP_EXCEDENTE @MATRICULA NVARCHAR(20)
AS
BEGIN
	DECLARE @ID NVARCHAR(20) = SUBSTRING(@MATRICULA,7,LEN(@MATRICULA));
	WITH DETALLE AS(
		SELECT HIST_OBD_MATRICULA MATRICULA, HIST_OBD_EVENTO EVENTO,
SUM((DATEDIFF(HOUR,HIST_OBD_ENTRADA,HIST_OBD_SALIDA))) HORAS 
FROM HIST_DETALLE WHERE HIST_DETALLE.HIST_OBD_MATRICULA = CAST(@ID AS INTEGER)
GROUP BY HIST_OBD_MATRICULA,HIST_OBD_EVENTO
	)
	SELECT D.MATRICULA, 
	D.EVENTO, 
	(SUM(HORAS) - (SELECT CE.CAT_EVE_MAXTYPE FROM CAT_EVENTOS CE WHERE CE.CAT_EVE_ID = D.EVENTO))
	"HORAS EXCEDENTES" FROM DETALLE D
	GROUP BY D.MATRICULA, D.EVENTO, D.HORAS;
END

EXEC SP_EXCEDENTE 'A202010001';

CREATE OR ALTER PROCEDURE SP_HORAS @TIPO NVARCHAR(20)
AS
BEGIN	
	WITH DETALLE AS(
		SELECT HIST_OBD_MATRICULA MATRICULA, HIST_OBD_EVENTO EVENTO,
SUM((DATEDIFF(HOUR,HIST_OBD_ENTRADA,HIST_OBD_SALIDA))) HORAS 
FROM HIST_DETALLE WHERE HIST_OBD_EVENTO = @TIPO
GROUP BY HIST_OBD_MATRICULA,HIST_OBD_EVENTO
	)
	SELECT D.MATRICULA, 
	D.EVENTO, 
	HORAS,
	IIF((SELECT CE.CAT_EVE_MAXTYPE FROM CAT_EVENTOS CE WHERE CE.CAT_EVE_ID = D.EVENTO) < SUM(D.HORAS), (SELECT CE.CAT_EVE_MAXTYPE FROM CAT_EVENTOS CE WHERE CE.CAT_EVE_ID = D.EVENTO), SUM(D.HORAS)) "TOTAL HORAS",
	(SUM(HORAS) - (SELECT CE.CAT_EVE_MAXTYPE FROM CAT_EVENTOS CE WHERE CE.CAT_EVE_ID = D.EVENTO))
	"HORAS EXCEDENTES" FROM DETALLE D
	GROUP BY D.MATRICULA, D.EVENTO, D.HORAS;
END
CREATE OR ALTER TRIGGER TG_STATUS
ON HIST_DETALLE
FOR UPDATE
AS BEGIN
	DECLARE @FECHAI DATETIME = (SELECT inserted.HIST_OBD_ENTRADA FROM inserted);
	DECLARE @FECHAF DATETIME = (SELECT inserted.HIST_OBD_SALIDA FROM inserted);
	DECLARE @TIPO INTEGER = (SELECT inserted.HIST_OBD_EVENTO FROM inserted);
	DECLARE @MATRICULA INTEGER = (SELECT inserted.HIST_OBD_MATRICULA FROM inserted);
	DECLARE @HORAS INTEGER = (SELECT 
	SUM((DATEDIFF(HOUR,HD.HIST_OBD_ENTRADA,HD.HIST_OBD_SALIDA))) 
	FROM HIST_DETALLE HD WHERE HD.HIST_OBD_MATRICULA = @MATRICULA );
	DECLARE @CONTADOR INTEGER = (SELECT COUNT(*) FROM HIST_DETALLE HD WHERE HD.HIST_OBD_MATRICULA = @MATRICULA);
	IF(@CONTADOR = 0)
		BEGIN
			UPDATE CAT_ALUMNOS SET CAT_ALU_STATUS = 0 WHERE CAT_ALU_MATRICULA = @MATRICULA;
		END
	ELSE
		BEGIN
			IF(@HORAS < 1230)
				BEGIN
					UPDATE CAT_ALUMNOS SET CAT_ALU_STATUS = 1 WHERE CAT_ALU_MATRICULA = @MATRICULA;
				END
			ELSE
				BEGIN
					UPDATE CAT_ALUMNOS SET CAT_ALU_STATUS = 2 WHERE CAT_ALU_MATRICULA = @MATRICULA;
				END
		END
END

CREATE OR ALTER TRIGGER TG_HISTORICO
ON HIST_SEMESTRES
FOR INSERT
AS
BEGIN
	DECLARE @ID INTEGER = (SELECT inserted.HIST_SEM_ID - 1 FROM inserted);
	DECLARE @ACTUAL INTEGER = (SELECT inserted.HIST_SEM_ID FROM inserted);
	INSERT INTO HIST_TUTORES(HIST_TUT_ID,HIST_TUT_MATRICULA,HIST_TUT_SEMESTRE,HIST_TUT_EVENTO,HIST_TUT_HORAS)
	SELECT CA.CAT_ALU_TUTOR, 
	CA.CAT_ALU_MATRICULA, 
	@ID,
	ISNULL(HIST_OBD_EVENTO,0),
	ISNULL(SUM((DATEDIFF(HOUR,HIST_OBD_ENTRADA,HIST_OBD_SALIDA))),0)
FROM HIST_DETALLE RIGHT JOIN CAT_ALUMNOS CA ON CA.CAT_ALU_MATRICULA = HIST_OBD_MATRICULA
AND CA.CAT_ALU_STATUS <2
GROUP BY CA.CAT_ALU_MATRICULA,HIST_OBD_EVENTO,CA.CAT_ALU_TUTOR
END

SELECT * FROM HIST_DETALLE;
SELECT CA.CAT_ALU_TUTOR,CA.CAT_ALU_MATRICULA, @ID FROM CAT_ALUMNOS CA 
	WHERE CA.CAT_ALU_STATUS < 2;

SELECT CA.CAT_ALU_STATUS "STATUS",COUNT(CA.CAT_ALU_MATRICULA) "CUANTOS" FROM CAT_ALUMNOS CA
GROUP BY CA.CAT_ALU_STATUS;

SELECT * FROM CAT_ALUMNOS CA WHERE CA.CAT_ALU_MATRICULA NOT IN(SELECT HT.HIST_TUT_MATRICULA FROM HIST_TUTORES HT)


WITH SEARCH AS(
SELECT DISTINCT(HT.HIST_TUT_MATRICULA) "MATRICULA", 'INCOMPLETAS' "TIPO", HT.HIST_TUT_SEMESTRE FROM HIST_TUTORES HT WHERE HT.HIST_TUT_HORAS > 0
UNION SELECT DISTINCT(HT.HIST_TUT_MATRICULA) "MATRICULA", 'SIN HORAS' "TIPO", HT.HIST_TUT_SEMESTRE FROM HIST_TUTORES HT WHERE HT.HIST_TUT_HORAS = 0
)
SELECT SEARCH.TIPO, COUNT(SEARCH.MATRICULA) "CUANTOS"  FROM SEARCH GROUP BY SEARCH.MATRICULA, SEARCH.TIPO, SEARCH.HIST_TUT_SEMESTRE

UNION
SELECT 'COMPLETAS' "STATUS", COUNT(CA.CAT_ALU_MATRICULA) "CUANTOS" FROM CAT_ALUMNOS CA 
WHERE CA.CAT_ALU_MATRICULA NOT IN(SELECT HT.HIST_TUT_MATRICULA FROM HIST_TUTORES HT) AND
CA.CAT_ALU_STATUS = 2 GROUP BY CA.CAT_ALU_MATRICULA;


SELECT HT.HIST_TUT_ID, HT.HIST_TUT_SEMESTRE, COUNT(HT.HIST_TUT_MATRICULA) "CUANTOS" FROM HIST_TUTORES HT
GROUP BY HT.HIST_TUT_MATRICULA,HT.HIST_TUT_ID, HT.HIST_TUT_SEMESTRE;